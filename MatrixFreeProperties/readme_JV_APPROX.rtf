{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red34\green139\blue34;}
{\*\expandedcolortbl;;\csgenericrgb\c13333\c54510\c13333;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs20 \cf2 Source: {\field{\*\fldinst{HYPERLINK "http://freesourcecode.net/matlabprojects/61845/jacobian-free-newton-krylov-%28jfnk%29-method-in-matlab#.WnwWN5M-cch"}}{\fldrslt http://freesourcecode.net/matlabprojects/61845/jacobian-free-newton-krylov-%28jfnk%29-method-in-matlab#.WnwWN5M-cch}}\
Title: Jacobian-Free Newton-Krylov method
\fs24 \cf0 \

\fs20 \cf2 Author: Cheuk Lau
\fs24 \cf0 \

\fs20 \cf2 Date: 1/20/2014
\fs24 \cf0 \

\fs20 \cf2 Description: This function solves a system of non-linear equations using
\fs24 \cf0 \

\fs20 \cf2              the Jacobian-Free Newton-Krylov (JFNK) method. The main
\fs24 \cf0 \

\fs20 \cf2              advantage of using JFNK over the traditional Newton method
\fs24 \cf0 \

\fs20 \cf2              is to avoid the need for generating and inverting the
\fs24 \cf0 \

\fs20 \cf2              Jacobian matrix. Typically the Jacobian matrix is not
\fs24 \cf0 \

\fs20 \cf2              analytically attainable and its numerical approximation
\fs24 \cf0 \

\fs20 \cf2              (e.g., via finite-difference methods) is not easily
\fs24 \cf0 \

\fs20 \cf2              invertible.\
Files required: (1) JFNK.m - Main function file
\fs24 \cf0 \

\fs20 \cf2                   (2) JV_APPROX.m
\fs24 \cf0 \

\fs20 \cf2 Reference: (1) Knoll D.A., Keyes D.E. "Jacobian-Free Newton-Krylov
\fs24 \cf0 \

\fs20 \cf2                methods: a survey of approaches and applications",
\fs24 \cf0 \

\fs20 \cf2                Journal of Computational Physics, August 2003.
\fs24 \cf0 \

\fs20 \cf2 Input parameters: F = Function handle of nonlinear equations in their
\fs24 \cf0 \

\fs20 \cf2                       residual form
\fs24 \cf0 \

\fs20 \cf2                   x0 = Initial guess
\fs24 \cf0 \

\fs20 \cf2                   epsilon = Error tolerance
\fs24 \cf0 \

\fs20 \cf2                   max_iter = Maximum number of JFNK iterations
\fs24 \cf0 \

\fs20 \cf2                   (See sample input for format)
\fs24 \cf0 \

\fs20 \cf2 Output: x = Converged solution
\fs24 \cf0 \

\fs20 \cf2         R = Residual using converged solution
\fs24 \cf0 \

\fs20 \cf2 Sample input:
\fs24 \cf0 \

\fs20 \cf2         F = @(x) [...
\fs24 \cf0 \

\fs20 \cf2         % equation 1
\fs24 \cf0 \

\fs20 \cf2         0.1309 * 1 / sqrt(3) * ...
\fs24 \cf0 \

\fs20 \cf2         (1 / sqrt(1 / 3 + x(1) ^ 2 + x(1) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          1 / sqrt(1 / 3 + x(2) ^ 2 + x(4) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          1 / sqrt(1 / 3 + x(3) ^ 2 + x(3) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          1 / sqrt(1 / 3 + x(4) ^ 2 + x(2) ^ 2)) - 0.4352;
\fs24 \cf0 \

\fs20 \cf2         % equation 2
\fs24 \cf0 \

\fs20 \cf2         0.1309 * ...
\fs24 \cf0 \

\fs20 \cf2         (x(1) / sqrt(1 / 3 + x(1) ^ 2 + x(1) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(2) / sqrt(1 / 3 + x(2) ^ 2 + x(4) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(3) / sqrt(1 / 3 + x(3) ^ 2 + x(3) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(4) / sqrt(1 / 3 + x(4) ^ 2 + x(2) ^ 2)) - 0.1751;
\fs24 \cf0 \

\fs20 \cf2         % equation 3
\fs24 \cf0 \

\fs20 \cf2         0.1309 * ...
\fs24 \cf0 \

\fs20 \cf2         (x(1) / sqrt(1 / 3 + x(1) ^ 2 + x(1) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(4) / sqrt(1 / 3 + x(2) ^ 2 + x(4) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(3) / sqrt(1 / 3 + x(3) ^ 2 + x(3) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(2) / sqrt(1 / 3 + x(4) ^ 2 + x(2) ^ 2)) - 0.1751;
\fs24 \cf0 \

\fs20 \cf2         % equation 4
\fs24 \cf0 \

\fs20 \cf2         0.1309 * 1 / sqrt(3) * ...
\fs24 \cf0 \

\fs20 \cf2         (x(1) / (1 / 3 + x(1) ^ 2 + x(1) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(2) / (1 / 3 + x(2) ^ 2 + x(4) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(3) / (1 / 3 + x(3) ^ 2 + x(3) ^ 2) + ...
\fs24 \cf0 \

\fs20 \cf2          x(4) / (1 / 3 + x(4) ^ 2 + x(2) ^ 2)) - 0.1395; ];
\fs24 \cf0 \

\fs20 \cf2         
\fs24 \cf0 \

\fs20 \cf2         x0 = [0.4330, 0.4330, 0.1443, 0.1443];
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \

\fs20 \cf2         epsilon = 1e-5;
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \

\fs20 \cf2         max_iter = 10;
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \

\fs20 \cf2   Output:
\fs24 \cf0 \

\fs20 \cf2         x = [0.4151, 0.3863, 0.0976, 0.0818]
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \

\fs20 \cf2         R = 1.0e-6 * [-0.0367, -0.2264, -0.2264, -0.2882] }